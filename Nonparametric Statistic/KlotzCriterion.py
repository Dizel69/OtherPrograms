import numpy as np
import scipy.stats as stats


# Статистика Клотца
def klotz_statistic(x, y):
    combined = np.concatenate([x, y])
    ranks = stats.rankdata(combined)  # ранжируем объединенные выборки
    n = len(x)
    m = len(y)
    ranks_x = ranks[:n]
    ranks_y = ranks[n:]

    # Расчет статистики Клотца
    s_x = np.sum((ranks_x - np.median(ranks)) ** 2)
    s_y = np.sum((ranks_y - np.median(ranks)) ** 2)
    f = min(s_x, s_y) / max(s_x, s_y)
    return f


# Функция для поиска критических значений из таблицы
def get_critical_values(n, m, alpha=0.05):
    # Полная таблица значений
    table = {
        (2, 2): {0.90: (72, 170), 0.95: (50, 179)},
        (2, 3): {0.90: (101, 206), 0.95: (76, 218)},
        (2, 4): {0.90: (127, 248), 0.95: (101, 263)},
        (2, 5): {0.90: (157, 284), 0.95: (127, 298)},
        (2, 6): {0.90: (177, 319), 0.95: (147, 333)},
        (3, 3): {0.90: (146, 277), 0.95: (119, 292)},
        (3, 4): {0.90: (176, 321), 0.95: (146, 340)},
        (3, 5): {0.90: (206, 365), 0.95: (176, 389)},
        (3, 6): {0.90: (234, 406), 0.95: (202, 427)},
        (4, 4): {0.90: (206, 365), 0.95: (176, 389)},
        (4, 5): {0.90: (248, 417), 0.95: (213, 445)},
        (4, 6): {0.90: (276, 462), 0.95: (243, 491)},
        (5, 5): {0.90: (298, 533), 0.95: (250, 552)},
        (5, 6): {0.90: (319, 576), 0.95: (284, 598)},
        (6, 6): {0.90: (347, 627), 0.95: (292, 678)},
        (7, 6): {0.90: (377, 688), 0.95: (321, 736)},
        (7, 7): {0.90: (427, 779), 0.95: (377, 841)},
        (8, 7): {0.90: (456, 841), 0.95: (398, 902)},
        (8, 8): {0.90: (506, 931), 0.95: (456, 1000)},
        (9, 8): {0.90: (533, 989), 0.95: (477, 1053)},
        (9, 9): {0.90: (582, 1078), 0.95: (533, 1147)},
        (10, 9): {0.90: (609, 1132), 0.95: (552, 1200)},
        (10, 10): {0.90: (657, 1219), 0.95: (609, 1291)},
        (11, 10): {0.90: (682, 1267), 0.95: (628, 1345)},
        (11, 11): {0.90: (731, 1353), 0.95: (682, 1434)},
        (12, 11): {0.90: (756, 1405), 0.95: (704, 1490)},
        (12, 12): {0.90: (803, 1490), 0.95: (756, 1581)},
        (13, 12): {0.90: (827, 1541), 0.95: (777, 1632)},
        (13, 13): {0.90: (874, 1625), 0.95: (827, 1721)},
        (14, 13): {0.90: (898, 1674), 0.95: (846, 1780)},
        (14, 14): {0.90: (943, 1758), 0.95: (898, 1869)},
        (15, 14): {0.90: (967, 1805), 0.95: (916, 1926)},
        (15, 15): {0.90: (1011, 1888), 0.95: (967, 2014)},
        (16, 15): {0.90: (1034, 1934), 0.95: (984, 2071)},
        (16, 16): {0.90: (1078, 2016), 0.95: (1034, 2157)},
        (17, 16): {0.90: (1102, 2061), 0.95: (1052, 2212)},
        (17, 17): {0.90: (1145, 2143), 0.95: (1102, 2298)},
        (18, 17): {0.90: (1168, 2187), 0.95: (1119, 2353)},
        (18, 18): {0.90: (1211, 2268), 0.95: (1168, 2437)},
        (19, 18): {0.90: (1234, 2312), 0.95: (1185, 2492)},
        (19, 19): {0.90: (1276, 2392), 0.95: (1234, 2576)},
        (20, 19): {0.90: (1300, 2437), 0.95: (1252, 2631)},
        (20, 20): {0.90: (1341, 2517), 0.95: (1300, 2714)}
    }

    # Преобразуем уровень значимости 0.05 в 0.95
    alpha_converted = 1 - alpha

    if (n, m) in table:
        critical_values = table[(n, m)][alpha_converted]
        return critical_values
    else:
        raise ValueError("Нет критических значений для данной комбинации n и m")


# Точный тест Клотца
def klotz_test_exact(x, y, alpha=0.05):
    f = klotz_statistic(x, y)
    n, m = len(x), len(y)

    try:
        L1, L2 = get_critical_values(n, m, alpha)
        if L1 <= f <= L2:
            print(f"Точный тест: Не отвергаем H0 (f = {f}, [{L1}, {L2}])")
            return True
        else:
            print(f"Точный тест: Отвергаем H0 (f = {f}, [{L1}, {L2}])")
            return False
    except ValueError as e:
        print(e)
        return None


# Асимптотический тест
def klotz_test_asymptotic(x, y, alpha=0.05):
    f = klotz_statistic(x, y)
    z_value = (f - 1) / np.sqrt(2 / (len(x) + len(y)))
    p_value = 2 * (1 - stats.norm.cdf(abs(z_value)))

    print(f"Асимптотический тест: f = {f}, z = {z_value}, p-value = {p_value}")

    if p_value > alpha:
        print("Асимптотический тест: Не отвергаем H0")
        return True
    else:
        print("Асимптотический тест: Отвергаем H0")
        return False


# Имитационный тест
def klotz_test_simulation(x, y, alpha=0.05, B=10000):
    n, m = len(x), len(y)
    f_observed = klotz_statistic(x, y)
    f_sim = []

    combined = np.concatenate([x, y])

    for _ in range(B):
        np.random.shuffle(combined)
        x_sim = combined[:n]
        y_sim = combined[n:]
        f_sim.append(klotz_statistic(x_sim, y_sim))

    f_sim = np.array(f_sim)
    p_value = np.mean(f_sim >= f_observed)

    print(f"Имитационный тест: f_observed = {f_observed}, p-value = {p_value}")

    if p_value > alpha:
        print("Имитационный тест: Не отвергаем H0")
        return True
    else:
        print("Имитационный тест: Отвергаем H0")
        return False


# Пример использования программы
x = np.array([65, 67, 64, 66, 68, 67, 65])
y = np.array([70, 72, 69, 71, 73, 71])
alpha = 0.05

# Тесты
print("Точный тест:")
klotz_test_exact(x, y, alpha)

print("\nАсимптотический тест:")
klotz_test_asymptotic(x, y, alpha)

print("\nИмитационный тест:")
klotz_test_simulation(x, y, alpha)
